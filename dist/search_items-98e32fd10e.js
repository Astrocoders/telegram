searchNodes=[{"doc":"Telegram Bot API request.The module expose a light layer over the Telegram Bot API HTTP-based interface, it does not expose any &quot;(data)binding&quot; over the HTTP interface and tries to abstract away only the boilerplate for building / sending / serializing the API requests.Compared to a full-binded interface it could result less elixir frendly but it will work with any version of the Bot API, hopefully without updates or incompatibily with new BOT API versions (as much as they remain backward compatible).References:API specificationBOT intro for developersGiven the token of your BOT you can issue any request using:method: Telegram API method name (ex. &quot;getMe&quot;, &quot;sendMessage&quot;)options: Telegram API method specific parameters (you can use elixir native types)Examples:Given the bot token (something like):token = &quot;123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11&quot;getMeTelegram.Api.request(token, &quot;getMe&quot;) {:ok, %{&quot;first_name&quot; =&gt; &quot;Abc&quot;, &quot;id&quot; =&gt; 1234567, &quot;is_bot&quot; =&gt; true, &quot;username&quot; =&gt; &quot;ABC&quot;}}sendMessageTelegram.Api.request(token, &quot;sendMessage&quot;, chat_id: 876532, text: &quot;Hello! .. silently&quot;, disable_notification: true) {:ok, %{&quot;chat&quot; =&gt; %{&quot;first_name&quot; =&gt; &quot;Firstname&quot;, &quot;id&quot; =&gt; 208255328, &quot;last_name&quot; =&gt; &quot;Lastname&quot;, &quot;type&quot; =&gt; &quot;private&quot;, &quot;username&quot; =&gt; &quot;xxxx&quot;}, &quot;date&quot; =&gt; 1505118722, &quot;from&quot; =&gt; %{&quot;first_name&quot; =&gt; &quot;Yyy&quot;, &quot;id&quot; =&gt; 234027650, &quot;is_bot&quot; =&gt; true, &quot;username&quot; =&gt; &quot;yyy&quot;}, &quot;message_id&quot; =&gt; 1402, &quot;text&quot; =&gt; &quot;Hello! .. silently&quot;}}getUpdatesTelegram.Api.request(token, &quot;getUpdates&quot;, offset: -1, timeout: 30) {:ok, [%{&quot;message&quot; =&gt; %{&quot;chat&quot; =&gt; %{&quot;first_name&quot; =&gt; &quot;Firstname&quot;, &quot;id&quot; =&gt; 208255328, &quot;last_name&quot; =&gt; &quot;Lastname&quot;, &quot;type&quot; =&gt; &quot;private&quot;, &quot;username&quot; =&gt; &quot;xxxx&quot;}, &quot;date&quot; =&gt; 1505118098, &quot;from&quot; =&gt; %{&quot;first_name&quot; =&gt; &quot;Firstname&quot;, &quot;id&quot; =&gt; 208255328, &quot;is_bot&quot; =&gt; false, &quot;language_code&quot; =&gt; &quot;en-IT&quot;, &quot;last_name&quot; =&gt; &quot;Lastname&quot;, &quot;username&quot; =&gt; &quot;xxxx&quot;}, &quot;message_id&quot; =&gt; 1401, &quot;text&quot; =&gt; &quot;Hello!&quot;}, &quot;update_id&quot; =&gt; 129745295}]}Sending filesIf a API parameter has a InputFile type and you want to send a local file, for example a photo stored locally at &quot;/tmp/photo.jpg&quot;, just wrap the parameter value in a tuple {:file, &quot;/tmp/photo.jpg&quot;}. If the file content is in memory wrap it in {:file_content, data, &quot;photo.jpg&quot;} tuple.sendPhotoTelegram.Api.request(token, &quot;sendPhoto&quot;, chat_id: 876532, photo: {:file, &quot;/tmp/photo.jpg&quot;}) Telegram.Api.request(token, &quot;sendPhoto&quot;, chat_id: 876532, photo: {:file_content, photo, &quot;photo.jpg&quot;})Downloading filesTo download a file from the telegram server you need a file_path pointer to the file. With that you can download the file via Telegram.Api.file{:ok, res} = Telegram.Api.request(token, &quot;sendPhoto&quot;, chat_id: 12345, photo: {:file, &quot;example/photo.jpg&quot;}) # pick the &#39;file_obj&#39; with the desired resolution [file_obj | _] = res[&quot;photo&quot;] # get the &#39;file_id&#39; file_id = file_obj[&quot;file_id&quot;]getFile{:ok, %{&quot;file_path&quot; =&gt; file_path}} = Telegram.Api.request(token, &quot;getFile&quot;, file_id: file_id) {:ok, file} = Telegram.Api.file(token, file_path)Reply MarkupIf a API parameter has a &quot;A JSON-serialized object&quot; type (InlineKeyboardMarkup, ReplyKeyboardMarkup, etc), just wrap the parameter value in a tuple {:json, value}.Reference: Keyboards, Inline KeyboardssendMessage with keyboardkeyboard = [ [&quot;A0&quot;, &quot;A1&quot;], [&quot;B0&quot;, &quot;B1&quot;, &quot;B2&quot;] ] keyboard_markup = %{one_time_keyboard: true, keyboard: keyboard} Telegram.Api.request(token, &quot;sendMessage&quot;, chat_id: 876532, text: &quot;Here a keyboard!&quot;, reply_markup: {:json, keyboard_markup})","ref":"Telegram.Api.html","title":"Telegram.Api","type":"module"},{"doc":"Download a file.Reference: BOT ApiExample:# send a photo {:ok, res} = Telegram.Api.request(token, &quot;sendPhoto&quot;, chat_id: 12345, photo: {:file, &quot;example/photo.jpg&quot;}) # pick the &#39;file_obj&#39; with the desired resolution [file_obj | _] = res[&quot;photo&quot;] # get the &#39;file_id&#39; file_id = file_obj[&quot;file_id&quot;] # obtain the &#39;file_path&#39; to dowload the file identified by &#39;file_id&#39; {:ok, %{&quot;file_path&quot; =&gt; file_path}} = Telegram.Api.request(token, &quot;getFile&quot;, file_id: file_id) {:ok, file} = Telegram.Api.file(token, file_path)","ref":"Telegram.Api.html#file/2","title":"Telegram.Api.file/2","type":"function"},{"doc":"Send a Telegram Bot API request.Reference: BOT Api","ref":"Telegram.Api.html#request/3","title":"Telegram.Api.request/3","type":"function"},{"doc":"","ref":"Telegram.Api.html#t:parameters/0","title":"Telegram.Api.parameters/0","type":"type"},{"doc":"","ref":"Telegram.Api.html#t:request_result/0","title":"Telegram.Api.request_result/0","type":"type"},{"doc":"","ref":"Telegram.Bot.html","title":"Telegram.Bot","type":"behaviour"},{"doc":"","ref":"Telegram.Bot.html#c:handle_update/2","title":"Telegram.Bot.handle_update/2","type":"callback"},{"doc":"","ref":"Telegram.Bot.Supervisor.html","title":"Telegram.Bot.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"Telegram.Bot.Supervisor.html#child_spec/1","title":"Telegram.Bot.Supervisor.child_spec/1","type":"function"},{"doc":"","ref":"Telegram.Bot.Supervisor.html#start_link/1","title":"Telegram.Bot.Supervisor.start_link/1","type":"function"},{"doc":"","ref":"Telegram.Bot.Supervisor.html#t:option/0","title":"Telegram.Bot.Supervisor.option/0","type":"type"},{"doc":"","ref":"Telegram.Bot.UpdatesPoller.html","title":"Telegram.Bot.UpdatesPoller","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.arg is passed as the argument to Task.start_link/1 in the :start field of the spec.For more information, see the Supervisor module, the Supervisor.child_spec/2 function and the Supervisor.child_spec/0 type.","ref":"Telegram.Bot.UpdatesPoller.html#child_spec/1","title":"Telegram.Bot.UpdatesPoller.child_spec/1","type":"function"},{"doc":"","ref":"Telegram.Bot.UpdatesPoller.html#start_link/1","title":"Telegram.Bot.UpdatesPoller.start_link/1","type":"function"},{"doc":"","ref":"Telegram.Bot.UpdatesPoller.html#t:options/0","title":"Telegram.Bot.UpdatesPoller.options/0","type":"type"},{"doc":"","ref":"Telegram.Bot.Utils.html","title":"Telegram.Bot.Utils","type":"module"},{"doc":"Get the &quot;from.user&quot; field in an Update object, if any","ref":"Telegram.Bot.Utils.html#get_from_username/1","title":"Telegram.Bot.Utils.get_from_username/1","type":"function"},{"doc":"Get the sent &quot;date&quot; field in an Update object, if any","ref":"Telegram.Bot.Utils.html#get_sent_date/1","title":"Telegram.Bot.Utils.get_sent_date/1","type":"function"},{"doc":"Telegram Telegram library for the Elixir language.","ref":"readme.html","title":"Telegram","type":"extras"},{"doc":"The package can be installed by adding telegram to your list of dependencies in mix.exs:def deps do [ {:telegram, git: &quot;https://github.com/visciang/telegram.git&quot;, tag: &quot;xxx&quot;} ] endTelegram APITelegram Bot API request.The module expose a light layer over the Telegram Bot API HTTP-based interface, it does not expose any &quot;(data)binding&quot; over the HTTP interface and tries to abstract away only the boilerplate for building / sending / serializing the API requests.Compared to a full-binded interface it could result less elixir frendly but it will work with any version of the Bot API, hopefully without updates or incompatibily with new Bot API versions (as much as they remain backward compatible).References:API specificationBot intro for developersGiven the token of your Bot you can issue any request using:method: Telegram API method name (ex. &quot;getMe&quot;, &quot;sendMessage&quot;)options: Telegram API method specific parameters (you can use elixir native types)","ref":"readme.html#installation","title":"Telegram - Installation","type":"extras"},{"doc":"Given the bot token (something like):token = &quot;123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11&quot;getMeTelegram.Api.request(token, &quot;getMe&quot;) {:ok, %{&quot;first_name&quot; =&gt; &quot;Abc&quot;, &quot;id&quot; =&gt; 1234567, &quot;is_bot&quot; =&gt; true, &quot;username&quot; =&gt; &quot;ABC&quot;}}sendMessageTelegram.Api.request(token, &quot;sendMessage&quot;, chat_id: 876532, text: &quot;Hello! .. silently&quot;, disable_notification: true) {:ok, %{&quot;chat&quot; =&gt; %{&quot;first_name&quot; =&gt; &quot;Firstname&quot;, &quot;id&quot; =&gt; 208255328, &quot;last_name&quot; =&gt; &quot;Lastname&quot;, &quot;type&quot; =&gt; &quot;private&quot;, &quot;username&quot; =&gt; &quot;xxxx&quot;}, &quot;date&quot; =&gt; 1505118722, &quot;from&quot; =&gt; %{&quot;first_name&quot; =&gt; &quot;Yyy&quot;, &quot;id&quot; =&gt; 234027650, &quot;is_bot&quot; =&gt; true, &quot;username&quot; =&gt; &quot;yyy&quot;}, &quot;message_id&quot; =&gt; 1402, &quot;text&quot; =&gt; &quot;Hello! .. silently&quot;}}getUpdatesTelegram.Api.request(token, &quot;getUpdates&quot;, offset: -1, timeout: 30) {:ok, [%{&quot;message&quot; =&gt; %{&quot;chat&quot; =&gt; %{&quot;first_name&quot; =&gt; &quot;Firstname&quot;, &quot;id&quot; =&gt; 208255328, &quot;last_name&quot; =&gt; &quot;Lastname&quot;, &quot;type&quot; =&gt; &quot;private&quot;, &quot;username&quot; =&gt; &quot;xxxx&quot;}, &quot;date&quot; =&gt; 1505118098, &quot;from&quot; =&gt; %{&quot;first_name&quot; =&gt; &quot;Firstname&quot;, &quot;id&quot; =&gt; 208255328, &quot;is_bot&quot; =&gt; false, &quot;language_code&quot; =&gt; &quot;en-IT&quot;, &quot;last_name&quot; =&gt; &quot;Lastname&quot;, &quot;username&quot; =&gt; &quot;xxxx&quot;}, &quot;message_id&quot; =&gt; 1401, &quot;text&quot; =&gt; &quot;Hello!&quot;}, &quot;update_id&quot; =&gt; 129745295}]}","ref":"readme.html#examples","title":"Telegram - Examples:","type":"extras"},{"doc":"If a API parameter has a InputFile type and you want to send a local file, for example a photo stored locally at &quot;/tmp/photo.jpg&quot;, just wrap the parameter value in a tuple {:file, &quot;/tmp/photo.jpg&quot;}. If the file content is in memory wrap it in {:file_content, data, &quot;photo.jpg&quot;} tuple.sendPhotoTelegram.Api.request(token, &quot;sendPhoto&quot;, chat_id: 876532, photo: {:file, &quot;/tmp/photo.jpg&quot;}) Telegram.Api.request(token, &quot;sendPhoto&quot;, chat_id: 876532, photo: {:file_content, photo, &quot;photo.jpg&quot;})","ref":"readme.html#sending-files","title":"Telegram - Sending files","type":"extras"},{"doc":"To download a file from the telegram server you need a file_path pointer to the file. With that you can download the file via Telegram.Api.file.{:ok, res} = Telegram.Api.request(token, &quot;sendPhoto&quot;, chat_id: 12345, photo: {:file, &quot;example/photo.jpg&quot;}) # pick the &#39;file_obj&#39; with the desired resolution [file_obj | _] = res[&quot;photo&quot;] # get the &#39;file_id&#39; file_id = file_obj[&quot;file_id&quot;]getFile{:ok, %{&quot;file_path&quot; =&gt; file_path}} = Telegram.Api.request(token, &quot;getFile&quot;, file_id: file_id) {:ok, file} = Telegram.Api.file(token, file_path)","ref":"readme.html#downloading-files","title":"Telegram - Downloading files","type":"extras"},{"doc":"If a API parameter has a &quot;A JSON-serialized object&quot; type (InlineKeyboardMarkup, ReplyKeyboardMarkup, etc), just wrap the parameter value in a tuple {:json, value}.Reference: Keyboards, Inline KeyboardssendMessage with keyboardkeyboard = [ [&quot;A0&quot;, &quot;A1&quot;], [&quot;B0&quot;, &quot;B1&quot;, &quot;B2&quot;] ] keyboard_markup = %{one_time_keyboard: true, keyboard: keyboard} Telegram.Api.request(token, &quot;sendMessage&quot;, chat_id: 876532, text: &quot;Here a keyboard!&quot;, reply_markup: {:json, keyboard_markup})Telegram BotA simple Bot behaviour.","ref":"readme.html#reply-markup","title":"Telegram - Reply Markup","type":"extras"},{"doc":"See example bot.","ref":"readme.html#example","title":"Telegram - Example","type":"extras"},{"doc":"The Telegram.Bot.Supervisor is responsible to run Telegram.Bot behaviours.You can run multiple Telegram.Bot behaviours under your supervisor with different options.The Telegram.Bot.Supervisor execution model (concurrently) dispatch every received update to a worker process (up to max_bot_concurrency) handling updates with the provider Telegram.Bot behaviour module. With this execution model every update processing is isolated.Currently no &quot;chat statefull session&quot; concept is implemented in the Telegram.Bot.Supervisor, but you can easely build one on top of this basic dispatch machinery.token_hello_bot = &quot;your Bot authentication token&quot; # required token_time_bot = &quot;....&quot; options = [ max_bot_concurrency: 1_000, # max concurrent worker processing updates for this bot purge: true, # [optional] purge old messages at startup ] # start 2 bot: HelloBot and TimeBot children = [ {Telegram.Bot.Supervisor, {HelloBot, token_hello_bot, options}}, {Telegram.Bot.Supervisor, {TimeBot, token_time_bot, options}} ] opts = [strategy: :one_for_one, name: MyApplication.Supervisor] Supervisor.start_link(children, opts)","ref":"readme.html#telegram-bot-supervisor","title":"Telegram - Telegram Bot Supervisor","type":"extras"}]